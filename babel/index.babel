var Button = ReactBootstrap.Button;
var Modal = ReactBootstrap.Modal;
var Panel = ReactBootstrap.Panel;
var Accordion = ReactBootstrap.Accordion;
var ButtonToolbar = ReactBootstrap.ButtonToolbar;
var recipes;
/*Next steps:
-Create parent element to host the add recipe buton and Modal display component
-Have each Modal component render the clickable recipe name that also launches the Modal with recipe.
-In parent, map a new state object (filled with recipe objects made up of title and ingredients) to create a modal component for each recipe.
-Set up add recipe function, pass it down to add recipe component. It will update the recipe "book" in the parent function.
-Add a cooking/preparation section?
*/
if (typeof localStorage["recipeList"] != "undefined"){
    recipes = JSON.parse(localStorage["recipeList"]);
    //console.log(recipes);
}
else{
       recipes =[ {
         title: 'Mac N Cheese',
         ingreds: ['Cheddar Cheese','Macaroni','Milk','Butter','Flour'],
         instruct: 'Boil water. Boil macaroni for 8-10 minutes. While boiling, melt butter in sauce pan on medium heat. When melted, add milk and flour. Stir until even consistency. Continue heating until mixture begins to boil. Slowly add cheese and stir until cheese sauce becomes thick and creamy. Rinse macaroni. Stir macaroni into cheese sauce. Delicious!'
        },
        {
         title: 'Chicken Caesar Salad',
         ingreds: ['Chicken Breast','Romaine Lettuce','Garlic Caesar Salad Dressing','Croutons'],
         instruct: 'Preheat oven to 375F. Cook chicken for 35-45 mintues for your preferred level of juiciness. Check temperature of chicken before consuming. With 5-10 minutes left in bake time, wash the romaine (if necessary) and toss it with croutons and caesar dressing. When chicken is done, chop it up into bite sized pieces and toss it with the salad and any other ingredients you might want (nuts, carrots, cabbage, cheese, etc). Donezo.'
        },
        {
         title: 'Stuffed Jumbo Shells',
         ingreds: ['Ricotta Cheese','Jumbo Shells','Your Choice of Sauce','Spinach'],
         instruct: 'First, mix ricotta cheese and thawed/drained spinach. (Consider adding mozzarella or parmesan to the mixture as well!) Boil jumbo shells for specified time (probably around 10 minutes). Create your sauce and set it to heat on low. When done boiling, stuff shells with spinach/ricotta combination. If not baking, pour hot sauce over shells and enjoy. If baking, preheat to 350F and place shells in a pan with sauce on the bottom. Bake for 25-35 minutes. Then enjoy!'
        }
      ]
}

class RecipeBook extends React.Component{
  constructor (props){
    super(props);
    this.state={
      recipes: this.props.recipes
    }
    this.updateRecipes = this.updateRecipes.bind(this);
    this.deleteRecipes = this.deleteRecipes.bind(this);
  }
  updateRecipes(newTitle, newIngreds,newInstruct){
    console.log('updating recipes');
    var added = {
      title: newTitle,
      ingreds: newIngreds.split(/\r?\n/),
      instruct: newInstruct
    }
    if(newTitle != 'Add New Recipe'){
      this.setState({
        recipes: this.state.recipes.concat([added])
      });
    }
    recipes.push(added);
    console.log(recipes);
    updateStorage();
    //passed to Recipe Adding Component to update the state
  }
  deleteRecipes(index){
    recipes.splice(index, 1);
    this.setState({
      recipes: recipes
    });
    updateStorage();
  }
  render(){
    console.log(this.state.recipes);
    return (
      <div>
        <TitleBox />
        <Accordion>
          {this.state.recipes.map(function(recipe,index){
            return (
              <Panel header={recipe.title} eventKey={index}>
                <ul>
                  {recipe.ingreds.map(function(ing, index){
                    return (
                      <li key={index}>
                        {ing}
                      </li>
                    )
                  })}
                </ul>
                <div>{recipe.instruct}</div>
                <RecipeEditor index={index} deleteRecipes={this.deleteRecipes}/>
              </Panel>
            )
          }, this)}
        </Accordion>
        <RecipeAdder updateRecipes={this.updateRecipes} />
      </div>
    )
  }
}

const TitleBox = ({}) => {
  return (
    <div id='title'>
      The Greasiest Cookbook Known to Anyone or Anything Ever
    </div>
  )
}

class RecipeEditor extends React.Component{
  constructor (props){
    super(props);
    this.state={
      showModal: false,
      editedTitle: recipes[this.props.index].title,  
      editedIngreds: recipes[this.props.index].ingreds,
      editedInstruct: recipes[this.props.index].instruct
    }
    this.editRecipe = this.editRecipe.bind(this);
    this.editTitle = this.editTitle.bind(this);
    this.editIngreds = this.editIngreds.bind(this);
    this.editInstruct = this.editInstruct.bind(this);
    this.open = this.open.bind(this);
    this.close = this.close.bind(this);
  }
  open(){
    this.setState({
      showModal: true
    },function(){console.log(this.state.showModal)});
  }
  close(){
    this.setState({
      showModal: false
    });
  }
  editRecipe(title,ingreds,instruct){
    console.log('is it working?');
    recipes[this.props.index].title = this.state.editedTitle;
    recipes[this.props.index].ingreds = this.state.editedIngreds;
    console.log(recipes[this.props.index].ingreds);
    recipes[this.props.index].instruct = this.state.editedInstruct;
    updateStorage();
  }
  editTitle(e){
    var newTitle = e.target.value;
    this.setState({
      editedTitle:  newTitle
    });
  }
  editIngreds(e){
    var newIngreds = e.target.value;
    var newIngreds = newIngreds.split('\n');
    this.setState({
      editedIngreds: newIngreds
    });
  }
  editInstruct(e){
    var newInstruct = e.target.value;
    this.setState({
      editedInstruct: newInstruct
    });
  }
  render(){
    var ingredients = JSON.stringify(this.state.editedIngreds);
    ingredients = ingredients.replace(/[\[\"\]]/g,'').replace(/,/g,'\n');
    console.log(ingredients);
    return (
      <div>
        <ButtonToolbar>
          <Button
            className='modalButton'
            id='editor'
            bsStyle="info"
            bsSize='large'
            onClick={this.open}>
            Edit
          </Button>
          <Button
            className='modalButton'
            bsStyle='danger' 
            bsSize='large' 
            onClick={() =>this.props.deleteRecipes(this.props.index)}>
            Delete
          </Button>
        </ButtonToolbar>
        
        
        <Modal show={this.state.showModal} onHide={this.close}>
          <Modal.Header closeButton>
            <Modal.Title><textarea id='editTitle' rows='1' onChange={this.editTitle}>{this.state.editedTitle}</textarea></Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <form>
              <textarea id='editIngreds' rows="9" type="text" onChange={this.editIngreds}>
                {ingredients}
              </textarea>
              <textarea id='instructions' rows='7' type='text' onChange={this.editInstruct}>{this.state.editedInstruct}</textarea>
            </form>
          </Modal.Body>
          <Modal.Footer>
            <Button onClick={() => this.editRecipe(this.state.editTitle,this.state.editIngreds,this.state.editInstruct)}>Save</Button>
            <Button onClick={this.close}>Close</Button>
          </Modal.Footer>
        </Modal>
      </div>
    );
  }
}

class RecipeAdder extends React.Component{
  constructor (props){
    super(props);
    this.state={
      showModal: false,
      titleValue: 'Add New Recipe',
      textValue: "List ingredients here\nNew line for each ingredient!",
      instructValue: "Add instructions here"
    };
    this.close= this.close.bind(this);
    this.open = this.open.bind(this);
    this.updateTitle = this.updateTitle.bind(this);
    this.updateIngreds = this.updateIngreds.bind(this);
    this.updateInstruct = this.updateInstruct.bind(this);
  }
  open(){
    this.setState({
      showModal: true
    },function(){console.log(this.state.showModal)});
  }
  close(){
    this.setState({
      showModal: false
    });
  }
  updateTitle(e){
    var newTitle = e.target.value;
    this.setState({
      titleValue:  newTitle
    });
  }
  updateIngreds(e){
    var newIngreds = e.target.value;
    this.setState({
      textValue: newIngreds
    },function(){console.log(this.state.textValue)});
  }
  updateInstruct(e){
    var newInstruct = e.target.value;
    this.setState({
      instructValue: newInstruct
    });
  }
  render(){
    return (
      <div id='theAdder'>
        <Button 
          bsStyle="info"
          bsSize='large'
          className='modalButton adderButton'
          onClick={this.open}>
            Add Recipe
        </Button>
        
        <Modal show={this.state.showModal} onHide={this.close}>
          <Modal.Header closeButton>
            <Modal.Title><textarea id='addTitle' rows='1' onChange={this.updateTitle}>Add Title Here</textarea></Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <form>
              <textarea id='addIngreds' rows="9" type="text" onChange={this.updateIngreds}>Add Ingredients here. Return between ingredients!</textarea>
              <textarea id='instructions' rows='7' type='text' onChange={this.updateInstruct}>Add Instructions here.</textarea>
            </form>
          </Modal.Body>
          <Modal.Footer>
            <Button onClick={() => this.props.updateRecipes(this.state.titleValue,this.state.textValue,this.state.instructValue)}>Save</Button>
            <Button onClick={this.close}>Close</Button>
          </Modal.Footer>
        </Modal>
      </div>
    );
  }
}

function updateStorage() {
  console.log('updating storage');
  localStorage.setItem("recipeList",JSON.stringify(recipes));
  
  ReactDOM.render(
    <RecipeBook recipes={recipes} />,
    document.getElementById('app')
  );
}
//window.localStorage.clear();
updateStorage();
